{"ast":null,"code":"var _jsxFileName = \"/home/hitesh/work/projects/chat-bot/src/client/components/pages/ChatScreen/ChatScreen.jsx\";\nimport React, { useState } from \"react\";\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\nimport \"./chat-screen.scss\";\n\nconst MessageHolder = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `message-holder ${props.source}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }, props.message));\n};\n\nexport default function App() {\n  const [inputTxt, setInputTxt] = useState('');\n  const [activeTab, setActiveTab] = useState(0);\n  const [messages, setMessages] = useState([]);\n  let tabs = [{\n    iconClass: 'fa-envelope',\n    label: 'CHAT'\n  }, {\n    iconClass: 'fa-envelope',\n    label: 'MY JOBS'\n  }, {\n    iconClass: 'fa-envelope',\n    label: 'PROFILE'\n  }];\n\n  const onTabClick = index => {\n    alert(tabs[index].label + ' Not Available');\n  };\n\n  const messageOnChange = e => {\n    setInputTxt(e.target.value);\n  };\n\n  const onMessageSend = () => {\n    let newMessages = [...messages];\n    let newMsg = {\n      message: inputTxt,\n      source: 'user'\n    };\n    newMessages.push(newMsg);\n    onMessage(inputTxt).then(res => {\n      let botMsg = {\n        message: res.data.botMessage,\n        source: 'bot'\n      };\n      newMessages.push(botMsg);\n      setMessages(newMessages);\n      setInputTxt('');\n    });\n  };\n\n  const onMessage = userMessage => {\n    return Promise.resolve({\n      data: {\n        botMessage: 'Pardon my ignorance, I am just a dummy.'\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    heading: 'Job Finder',\n    tabs: tabs,\n    activeTab: activeTab,\n    onTabClick: onTabClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-scroll-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, messages.map((cur, index) => {\n    return /*#__PURE__*/React.createElement(MessageHolder, Object.assign({}, cur, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 36\n      }\n    }));\n  }))), /*#__PURE__*/React.createElement(Footer, {\n    onChange: messageOnChange,\n    inputVal: inputTxt,\n    onSend: onMessageSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/home/hitesh/work/projects/chat-bot/src/client/components/pages/ChatScreen/ChatScreen.jsx"],"names":["React","useState","Header","Footer","MessageHolder","props","source","message","App","inputTxt","setInputTxt","activeTab","setActiveTab","messages","setMessages","tabs","iconClass","label","onTabClick","index","alert","messageOnChange","e","target","value","onMessageSend","newMessages","newMsg","push","onMessage","then","res","botMsg","data","botMessage","userMessage","Promise","resolve","map","cur"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\nimport \"./chat-screen.scss\";\n\nconst MessageHolder = (props) => {\n    return (\n        <div className={`message-holder ${props.source}`}>\n            <div className='message'>\n                {props.message}\n            </div>\n        </div>\n    )\n}\n\nexport default function App() {\n    const [inputTxt, setInputTxt] = useState('');\n    const [activeTab, setActiveTab] = useState(0);\n    const [messages, setMessages] = useState([]);\n    let tabs = [{ iconClass: 'fa-envelope', label: 'CHAT' }, { iconClass: 'fa-envelope', label: 'MY JOBS' }, { iconClass: 'fa-envelope', label: 'PROFILE' }];\n\n    const onTabClick = (index) => {\n        alert(tabs[index].label + ' Not Available');\n    }\n\n    const messageOnChange = (e) => {\n        setInputTxt(e.target.value);\n    }\n\n    const onMessageSend = () => {\n        let newMessages = [...messages];\n        let newMsg = { message: inputTxt, source: 'user' };\n        newMessages.push(newMsg);\n        onMessage(inputTxt).then((res) => {\n            let botMsg = { message: res.data.botMessage, source: 'bot' };\n            newMessages.push(botMsg);\n            setMessages(newMessages);\n            setInputTxt('');\n        })\n    }\n\n    const onMessage = (userMessage) => {\n        return Promise.resolve({\n            data: {\n                botMessage: 'Pardon my ignorance, I am just a dummy.'\n            }\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"chat-container\">\n                <Header heading={'Job Finder'} tabs={tabs} activeTab={activeTab} onTabClick={onTabClick} />\n                <div className='chat-scroll-holder'>\n                    <div className='chat-holder'>\n                        {messages.map((cur, index) => {\n                            return <MessageHolder {...cur} key={index} />\n                        })}\n                    </div>\n                </div>\n                <Footer onChange={messageOnChange} inputVal={inputTxt} onSend={onMessageSend} />\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}