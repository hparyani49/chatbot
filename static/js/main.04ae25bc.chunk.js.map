{"version":3,"sources":["client/components/pages/Header/Header.jsx","client/components/pages/Footer/Footer.jsx","client/components/pages/ChatScreen/ChatScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","heading","tabs","map","cur","index","activeTab","onClick","onTabClick","iconClass","label","onChange","value","inputVal","placeholder","onSend","MessageHolder","source","message","App","useState","inputTxt","setInputTxt","messages","setMessages","onMessage","userMessage","Promise","resolve","data","botMessage","alert","key","Footer","e","target","newMessages","newMsg","push","then","res","botMsg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"uSA2BeA,G,MAxBA,SAACC,GACZ,OACI,oCACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,cACX,uBAAGA,UAAU,iBACZD,EAAME,SAEX,yBAAKD,UAAU,QACVD,EAAMG,KAAKC,KAAI,SAACC,EAAKC,GAClB,OACI,yBAAKL,UAAS,cAASD,EAAMO,WAAaD,EAAQ,SAAW,IAAME,QAAS,kBAAMR,EAAMS,WAAWH,KAC/F,uBAAGL,UAAS,aAAQI,EAAIK,aACxB,6BAAML,EAAIM,aAM9B,yBAAKV,UAAU,mBCHZF,G,MAhBA,SAACC,GACZ,OACI,oCACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,mBACX,2BAAOA,UAAU,QAAQW,SAAUZ,EAAMY,SAAUC,MAAOb,EAAMc,SAAUC,YAAY,kBAE1F,yBAAKd,UAAU,cAAcO,QAASR,EAAMgB,QACxC,uBAAGf,UAAU,+BAGrB,yBAAKA,UAAU,mBCTrBgB,G,MAAgB,SAACjB,GACnB,OACI,yBAAKC,UAAS,yBAAoBD,EAAMkB,SACpC,yBAAKjB,UAAU,WACVD,EAAMmB,YAMR,SAASC,IAAO,IAAD,EACMC,mBAAS,IADf,mBACnBC,EADmB,KACTC,EADS,OAEQF,mBAAS,GAFjB,mBAEnBd,EAFmB,aAGMc,mBAAS,KAHf,mBAGnBG,EAHmB,KAGTC,EAHS,KAItBtB,EAAO,CAAC,CAAEO,UAAW,cAAeC,MAAO,QAAU,CAAED,UAAW,cAAeC,MAAO,WAAa,CAAED,UAAW,cAAeC,MAAO,YAsBtIe,EAAY,SAACC,GACf,OAAOC,QAAQC,QAAQ,CACnBC,KAAM,CACFC,WAAY,8CAKxB,OACI,yBAAK9B,UAAU,OACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAAQC,QAAS,aAAcC,KAAMA,EAAMI,UAAWA,EAAWE,WA/B1D,SAACH,GAChB0B,MAAM7B,EAAKG,GAAOK,MAAQ,qBA+BlB,yBAAKV,UAAU,sBACX,yBAAKA,UAAU,eACVuB,EAASpB,KAAI,SAACC,EAAKC,GAChB,OAAO,kBAAC,EAAD,iBAAmBD,EAAnB,CAAwB4B,IAAK3B,UAIhD,kBAAC4B,EAAD,CAAQtB,SAnCI,SAACuB,GACrBZ,EAAYY,EAAEC,OAAOvB,QAkCsBC,SAAUQ,EAAUN,OA/B7C,WAClB,IAAIqB,EAAW,YAAOb,GAClBc,EAAS,CAAEnB,QAASG,EAAUJ,OAAQ,QAC1CmB,EAAYE,KAAKD,GACjBZ,EAAUJ,GAAUkB,MAAK,SAACC,GACtB,IAAIC,EAAS,CAAEvB,QAASsB,EAAIX,KAAKC,WAAYb,OAAQ,OACrDmB,EAAYE,KAAKG,GACjBjB,EAAYY,GACZd,EAAY,Y,MCzBTH,MARf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,QCKc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxC,c","file":"static/js/main.04ae25bc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./header.scss\";\n\nconst Header = (props) => {\n    return (\n        <>\n            <div className=\"header\">\n                <div className='header-top'>\n                    <i className='fa fa-wechat'></i>\n                    {props.heading}\n                </div>\n                <div className=\"tabs\">\n                    {props.tabs.map((cur, index) => {\n                        return (\n                            <div className={`tab ${props.activeTab == index ? \"active\" : \"\"}`} onClick={() => props.onTabClick(index)}>\n                                <i className={`fa ${cur.iconClass}`} />\n                                <div>{cur.label}</div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n            <div className='fake-header'></div>\n        </>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport \"./footer.scss\";\n\nconst Header = (props) => {\n    return (\n        <>\n            <div className='footer'>\n                <div className='input-container'>\n                    <input className='input' onChange={props.onChange} value={props.inputVal} placeholder='Type message' />\n                </div>\n                <div className='send-button' onClick={props.onSend}>\n                    <i className='fa fa-arrow-circle-right'></i>\n                </div>\n            </div>\n            <div className='fake-footer'></div>\n        </>\n    )\n}\n\nexport default Header;","import React, { useState } from \"react\";\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\nimport \"./chat-screen.scss\";\n\nconst MessageHolder = (props) => {\n    return (\n        <div className={`message-holder ${props.source}`}>\n            <div className='message'>\n                {props.message}\n            </div>\n        </div>\n    )\n}\n\nexport default function App() {\n    const [inputTxt, setInputTxt] = useState('');\n    const [activeTab, setActiveTab] = useState(0);\n    const [messages, setMessages] = useState([]);\n    let tabs = [{ iconClass: 'fa-envelope', label: 'CHAT' }, { iconClass: 'fa-envelope', label: 'MY JOBS' }, { iconClass: 'fa-envelope', label: 'PROFILE' }];\n\n    const onTabClick = (index) => {\n        alert(tabs[index].label + ' Not Available');\n    }\n\n    const messageOnChange = (e) => {\n        setInputTxt(e.target.value);\n    }\n\n    const onMessageSend = () => {\n        let newMessages = [...messages];\n        let newMsg = { message: inputTxt, source: 'user' };\n        newMessages.push(newMsg);\n        onMessage(inputTxt).then((res) => {\n            let botMsg = { message: res.data.botMessage, source: 'bot' };\n            newMessages.push(botMsg);\n            setMessages(newMessages);\n            setInputTxt('');\n        })\n    }\n\n    const onMessage = (userMessage) => {\n        return Promise.resolve({\n            data: {\n                botMessage: 'Pardon my ignorance, I am just a dummy.'\n            }\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"chat-container\">\n                <Header heading={'Job Finder'} tabs={tabs} activeTab={activeTab} onTabClick={onTabClick} />\n                <div className='chat-scroll-holder'>\n                    <div className='chat-holder'>\n                        {messages.map((cur, index) => {\n                            return <MessageHolder {...cur} key={index} />\n                        })}\n                    </div>\n                </div>\n                <Footer onChange={messageOnChange} inputVal={inputTxt} onSend={onMessageSend} />\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport ChatScreen from './client/components/pages/ChatScreen/ChatScreen';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChatScreen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}